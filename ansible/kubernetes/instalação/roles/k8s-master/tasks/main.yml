---
- name: Incluir variáveis de configuração
  include_vars:
    file: "{{ playbook_dir }}/roles/configuration/cfg.yml"

- name: Debug cfg variable
  debug:
    var: cfg

- name: Usar variáveis de configuração
  debug:
    msg: "O endereço do servidor API é {{ cfg.apiserver_address }} e o CIDR da rede de pods é {{ cfg.pod_network_cidr }}"

- name: Verificar se o kubeadm init já foi executado
  stat:
    path: /etc/kubernetes/admin.conf
  register: kubeadm_init_status

- name: Inicializar o cluster com kubeadm
  command: kubeadm init --pod-network-cidr={{ cfg.pod_network_cidr }} --apiserver-advertise-address={{ cfg.apiserver_address }}
  register: kubeadm_init_output
  when:
    - "'k8sMaster' in group_names"
    - kubeadm_init_status.stat.exists == false

- name: Verificar se o arquivo de configuração do kubectl já existe para o usuário atual
  stat:
    path: "/home/{{ ansible_user }}/.kube/config"
  register: kubeconfig_status

- name: Criar a pasta kubeconfig
  file:
    path: "/home/{{ ansible_user }}/.kube"
    state: directory
    mode: '0755'
  when: kubeconfig_status.stat.exists == false

- name: Copiar o arquivo admin.conf
  command: cp /etc/kubernetes/admin.conf /home/{{ ansible_user }}/.kube/config
  when: kubeconfig_status.stat.exists == false

- name: Ajustar permissões do kubeconfig
  command: chown {{ ansible_user }}:{{ ansible_user }} /home/{{ ansible_user }}/.kube/config
  when: kubeconfig_status.stat.exists == false

- name: Mensagem informativa caso o kubeadm init já tenha sido executado
  debug:
    msg: "O cluster Kubernetes já foi inicializado."
  when: kubeadm_init_status.stat.exists == true

- name: Verificar se os pods da rede Weave já estão em execução
  command: kubectl get pods -n kube-system -l name=weave-net
  register: weave_pods_status
  ignore_errors: yes

- name: Instalar a rede Weave (pod network)
  command: kubectl apply -f https://github.com/weaveworks/weave/releases/download/v2.8.1/weave-daemonset-k8s.yaml
  when: weave_pods_status.rc != 0

- name: Gerar o token de bootstrap para os nós workers
  shell: kubeadm token create --print-join-command
  register: kubeadm_token_output

- name: Salvar o comando join em um arquivo
  copy:
    content: "{{ kubeadm_token_output.stdout }}"
    dest: /etc/kubernetes/join_command.txt

- name: Copiar o comando join do master para a máquina host
  fetch:
    src: /etc/kubernetes/join_command.txt
    dest: ./join_command.txt
    flat: yes
